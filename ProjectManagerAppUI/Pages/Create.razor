@page "/Create"
@attribute [Authorize]
@using ProjectManagerAppUI.Components
@using ProjectManagerAppUI.Models
@inject AuthenticationStateProvider authProvider
@inject ICategoryData categoryData
@inject IProjectInfoData projectinfoData
@inject IUserData userData
@inject NavigationManager navManager

<h1 class="page-heading text-uppercase mb-4">Make a Project</h1>

<div class="row justify-content-center create-form">
    <div class="col-xl-8 col-lg-10 form-layout">
        <div class="close-button-section">
            <button class="btn btn-close" @onclick="ClosePage"></button>
        </div>
        @if(categories is not null)
        {
            <EditForm Model="projectinfo" OnValidSubmit="CreateProjectInfo">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="input-section">
                    <label class="form-label fw-bold text-uppercase" for="projectinfo-text">Project Info</label>
                    <div class="input-description">The general information for a project.</div>
                    <InputText class="form-control" id="projectinfo-text" @bind-Value="projectinfo.ProjectInfo" />
                </div>
                <div class="input-section">
                    <label class="form-label fw-bold text-uppercase" for="category">Category</label>
                    <div class="input-description">Choose one category.</div>
                    <div class="col-lg-8">
                        <MyInputRadioGroup id="category" @bind-Value="projectinfo.CategoryId">
                            @foreach(var c in categories)
                            {
                                <div class="radio-item-group">
                                    <InputRadio Value="@c.Id" id="@c.Id" />
                                    <label for="@c.Id">@c.CategoryName - @c.CategoryDescription</label>
                                </div>
                            }
                        </MyInputRadioGroup>
                    </div>
                </div>
                <div class="input-section">
                    <label class="form-label fw-bold text-uppercase" for="description">Description </label>
                    <div class="input-description">Briefly describe your suggestion</div>
                    <InputText class="form-control" id="desctiption" @bind-Value="projectinfo.Description" />
                </div>
                <div class="center-children">
                    <button class="btn btn-main btn-lg text-uppercase" type="submit">Create Project</button>
                </div>
            </EditForm>           
        }

    </div>
</div>

@code {
    private CreateProjectInfoModel projectinfo = new();
    private List<CategoryModel> categories;
    private UserModel loggedInUser;

    protected async override Task OnInitializedAsync()
    {
        categories = await categoryData.GetAllCategories();

        //var authState = await authProvider.GetAuthenticationStateAsync();
        //string objectId = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("objectidentifier"))?.Value;
        //loggedInUser = await userData.GetUserFromAuthentication(objectId);

        loggedInUser = await authProvider.GetUserFromAuth(userData);
    }



    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

    private async Task CreateProjectInfo()
    {
        ProjectInfoModel p = new();
        p.ProjectName = projectinfo.ProjectInfo;
        p.Description = projectinfo.Description;
        p.Author = new BasicUserModel(loggedInUser);
        p.Category = categories.Where(c => c.Id == projectinfo.CategoryId).FirstOrDefault();

        if(p.Category is null)
        {
            projectinfo.CategoryId = "";
            return;
        }

        await projectinfoData.CreateProjectInfo(p);
        projectinfo = new();
        ClosePage();
    }
}
