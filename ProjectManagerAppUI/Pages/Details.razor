@page "/Details/{Id}"

@inject NavigationManager navManager
@inject AuthenticationStateProvider authProvider;
@inject IUserData userData
@inject IProjectInfoData projectinfoData
@inject IStatusData statusData

<h1 class="page-heading text-uppercase mb-4">Project Info Details</h1>

<div class="row justify-content-center detail-form">
    <div class="col-xl-8 col-lg-10 form-layout">
        @if(project is not null)
        {
            <div class="row project-detail-row">
                <div class="col-11 project-detail">
                    <div>
                        <div class="@GetVoteClass()" @onclick="VoteUp">
                            <div class="text-uppercase">@GetUpvoteTopText()</div>
                            <span class="oi oi-caret-top detail-upvote"></span>
                            <div class="text-uppercase">@GetUpvoteBottomText()</div>
                        </div>
                        <div class="project-detail-date">
                            <div>@project.DateCreated.ToString("MM.dd.yyyy")</div>
                        </div>
                    </div>
                     <div class="project-detail-text">
                        <div class="fw-bold mb-2 project-detail-projectname">@project.ProjectName</div>
                        <div class="mb-2 project-detail-author">@project.Author.DisplayName</div>
                        <div class="mb-2 d-none d-md-block">@project.Description</div>
                        <div class="project-entry-text-category d-none d-md-block">
                            @project.Category.CategoryName
                        </div>
                    </div>
                </div>

                <div class="col-1 close-button-section">
                    <button class="btn btn-close" @onclick="ClosePage"></button>
                </div>
                <div class="row d-block d-md-none">
                    <div class="project-detail-text">
                        <div>@project.Description</div>
                        <div class="project-entry-text-category">@project.Category.CategoryName</div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@if (project?.ProjectStatus is not null)
{
    <div class="row justify-content-center detail-form">
        <div class="col-xl-8 col-lg-10 project-results form-layout">
            <div class="@GetStatusClass()"></div>
            <div class="project-detail-status-section">
                <div class="project-detail-status fw-bold mb-2 project-detail-projectname">
                    @project.ProjectStatus.StatusName
                </div>
                <div class="project-detail-owner-notes">
                    @((MarkupString)project.OwnerNotes)
                </div>
            </div>
        </div>
    </div>  
}

@if (project is not null)
{
    <AuthorizeView Policy="Admin">
        <div class="row justify-content-center detail-form">
            <div class="col-xl-8 col-lg-10 form-layout admin-details">
                <div>
                    <div class="project-detail-status fw-bold mb-2 project-detail-projectname">
                        Set Status
                    </div>
                @if (string.IsNullOrWhiteSpace(settingStatus))
                {
                    <div class="admin-set-statuses">
                        <button @onclick="@(() => settingStatus = "completed")"
                            class="btn project-entry-text-category btn-archive btn-status-completed">
                            completed
                        </button>
                        <button @onclick="@(() => settingStatus = "watching")"
                            class="btn project-entry-text-category btn-archive btn-status-watching">
                            watching
                        </button>
                        <button @onclick="@(() => settingStatus = "upcoming")"
                            class="btn project-entry-text-category btn-archive btn-status-upcoming">
                            upcoming
                        </button>
                        <button @onclick="@(() => settingStatus = "dismissed")"
                            class="btn project-entry-text-category btn-archive btn-status-dismissed">
                            dismissed
                        </button>
                        </div>
                    }
                    else if (settingStatus == "completed")
                    {
                        <div>
                            <input @bind="urlText" class="form-control rounded-control" type="text"
                                placeholder="Url" aria-label="Content Url" />
                        </div>
                        <div class="project-entry-bottom">
                            <button class="btn btn-archive-confirm" 
                                @onclick="CompleteSetStatus">
                                confirm
                            </button>
                            <button class="btn btn-archive-reject" 
                                @onclick="(() => settingStatus = null)">
                                cancel
                            </button>
                        </div>
                    }
                    else
                    {
                        <div class="project-entry-bottom">
                            <button class="btn btn-archive-confirm" 
                                @onclick="CompleteSetStatus">
                                confirm
                            </button>
                            <button class="btn btn-archive-reject" 
                                @onclick="(() => settingStatus = null)">
                                cancel
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </AuthorizeView>
}

@code {
    [Parameter]
    public string Id { get; set; }

    private ProjectInfoModel project;
    private UserModel loggedInUser;

    private List<StatusModel> statuses;
    private string settingStatus = "";
    private string urlText = "";

    protected async override Task OnInitializedAsync()
    {
        project = await projectinfoData.GetProjectInfo(Id);
        loggedInUser = await authProvider.GetUserFromAuth(userData);
        statuses = await statusData.GetAllStatuses();
    }

    private async Task CompleteSetStatus()
    {
        switch (settingStatus)
        {
            case "completed":
                if (string.IsNullOrWhiteSpace(urlText))
                {
                    return;
                }
                project.ProjectStatus = statuses.Where(s => s.StatusName.ToLower() == settingStatus.ToLower()).First();
                project.OwnerNotes = $"You are right, this is an important topic for developers. We created a resource about it here: <a href='{urlText}' target='_blank'>{urlText}</a>";
                break;

            case "watching":
                if (string.IsNullOrWhiteSpace(urlText))
                {
                    return;
                }
                project.ProjectStatus = statuses.Where(s => s.StatusName.ToLower() == settingStatus.ToLower()).First();
                project.OwnerNotes = "We noticed the interest this suggestion is getting! If more people are interested we may address this topic in an upcoming resource.";
                break;
            case "upcoming":
                if (string.IsNullOrWhiteSpace(urlText))
                {
                    return;
                }
                project.ProjectStatus = statuses.Where(s => s.StatusName.ToLower() == settingStatus.ToLower()).First();
                project.OwnerNotes = "Great suggestion!  We have a resource in the pipeline to address this topic.";
                break;

            case "dismissed":
                if (string.IsNullOrWhiteSpace(urlText))
                {
                    return;
                }
                project.ProjectStatus = statuses.Where(s => s.StatusName.ToLower() == settingStatus.ToLower()).First();
                project.OwnerNotes = "Sometimes a good idea doesn't fit within out scope and vision. This is one of those ideas.";
                break;
            default:
                return;
        }

        settingStatus = null;
        await projectinfoData.UpdateProjectInfo(project);
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

    private string GetUpvoteTopText()
    {
        if(project.UserVotes?.Count > 0)
        {
            return project.UserVotes.Count.ToString("00");
        }
        else
        {
            if (project.Author.Id == loggedInUser?.Id)
            {
                return "Awaiting";
            } 
            else
            {
                return "Click To";
            }
        }
    }

    private string GetUpvoteBottomText()
    {
        if (project.UserVotes?.Count > 1)
        {
            return "Upvotes";
        }
        else
        {
            return "Upvote";
        }
    }

    private async Task VoteUp()
    {
        if (loggedInUser is not null)
        {
            if (project.Author.Id == loggedInUser.Id)
            {
                // Can't vote on yor own suggestion
                return;
            }

            if (project.UserVotes.Add(loggedInUser.Id) == false)
            {
                project.UserVotes.Remove(loggedInUser.Id);
            }

            await projectinfoData.UpvoteProjectInfo(project.Id, loggedInUser.Id);
        } 
        else
        {
            navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
        }
    }

    private string GetVoteClass()
    {
        if(project.UserVotes is null || project.UserVotes.Count == 0)
        {
            return "project-detail-no-votes";
        }
        else if (project.UserVotes.Contains(loggedInUser?.Id))
        {
            return "project-detail-voted";
        } else 
        {
            return "project-detail-not-voted";
        }
    }

    private string GetStatusClass()
    {
                if (project is null || project.ProjectStatus is null)
        {
            return "project-detail-status-none";
        }

        string output = project.ProjectStatus.StatusName switch
        {
            "Completed" => "project-detail-status-completed",
            "Watching" => "project-detail-status-watching",
            "Upcoming" => "project-detail-status-upcoming",
            "Dismissed" => "project-detail-status-dismissed",
            _ => "suggestion-detail-status-none",
        };

        return output;
    }
}
