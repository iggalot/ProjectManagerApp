@page "/SampleData"
@inject ICategoryData categoryData
@inject IStatusData statusData
@inject IUserData userData
@inject IProjectInfoData projectinfoData

<h3>SampleData</h3>

@if (categoriesCreated)
{
    <h4>Categories have been created</h4>
}
else
{
    <button class="btn btn-primary" @onclick="CreateCategories">Create Categories</button>
}

@if (statusCreated)
{ 
    <h4>Status have been created</h4>
} else
{
    <button class="btn btn-primary" @onclick="CreateStatuses">Create Statuses</button>
}

<button class="btn btn-danger" @onclick="GenerateSampleData">Generate Sample Data</button>


@code {
    private bool categoriesCreated = false;
    private bool statusCreated = false;

    private async Task GenerateSampleData()
    {
        UserModel user = new()
            {
                FirstName = "Jim",
                LastName = "Allen",
                EmailAddress = "jim@test.com",
                DisplayName = "Sample Jim Allen",
                ObjectIdentifier = "abc-123"
            };
        await userData.CreateUser(user);

        var foundUser = await userData.GetUserFromAuthentication("abc-123");
        var categories = await categoryData.GetAllCategories();
        var statuses = await statusData.GetAllStatuses();

        HashSet<string> votes = new();
        votes.Add("1");
        votes.Add("2");
        votes.Add("3");


        ProjectInfoModel project = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[0],
                ProjectName = "Sample Project 1",
                Description = "A sample project"
            };
        await projectinfoData.CreateProjectInfo(project);

        project = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[1],
                ProjectName = "Sample Project 2",
                Description = "Another sample project",
                ProjectStatus = statuses[0],
                OwnerNotes = "These are notes for the status"
            };
        await projectinfoData.CreateProjectInfo(project);

        project = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[2],
                ProjectName = "Sample Project 3",
                Description = "Another sample project",
                ProjectStatus = statuses[1],
                OwnerNotes = "These are notes for the status"
            };
        await projectinfoData.CreateProjectInfo(project);

        project = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[3],
                ProjectName = "Sample Project 4",
                Description = "Another sample project",
                ProjectStatus = statuses[2],
                OwnerNotes = "These are notes for the status",
                UserVotes = votes
            };
        await projectinfoData.CreateProjectInfo(project);

        votes.Add("4");

        project = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[4],
                ProjectName = "Sample Project 4",
                Description = "Another sample project",
                ProjectStatus = statuses[3],
                OwnerNotes = "These are notes for the status",
                UserVotes = votes
            };
        await projectinfoData.CreateProjectInfo(project);
    }

    private async Task CreateCategories()
    {
        var categories = await categoryData.GetAllCategories();

        if(categories?.Count > 0)
        {
            return;
        }

        CategoryModel cat = new()
        {
            CategoryName = "Courses",
            CategoryDescription = "Full paid courses."
        };
        await categoryData.CreateCategory(cat);

        cat = new()
        {
            CategoryName = "Dev Questions",
            CategoryDescription = "Advice on being a developer."
        };
        await categoryData.CreateCategory(cat);

        cat = new()
        {
            CategoryName = "In-Depth Tutorial",
            CategoryDescription = "A deep-dive video on how to use a  topic."
        };
        await categoryData.CreateCategory(cat);

        cat = new()
        {
            CategoryName = "10-Minute Training",
            CategoryDescription = "A quick \"How do I use this?\" video."
        };
        await categoryData.CreateCategory(cat);

        cat = new()
        {
            CategoryName = "Other",
            CategoryDescription = "Not sure which category this fits in."
        };
        await categoryData.CreateCategory(cat);

        categoriesCreated = true;
    }

    private async Task CreateStatuses()
    {
        var statuses = await statusData.GetAllStatuses();

        if (statuses?.Count > 0)
        {
            return;    
        }

        StatusModel stat = new()
            {
                StatusName = "Completed",
                StatusDescription = "The project was accepted and the corresponding item was created."
            };
        await statusData.CreateStatus(stat);

        stat = new()
            {
                StatusName = "Watching",
                StatusDescription = "The project is interesting.  We are watching to see how much interest there is in it."
            };
        await statusData.CreateStatus(stat);

        stat = new()
            {
                StatusName = "Upcoming",
                StatusDescription = "The project was accepted and it will be released soon."
            };
        await statusData.CreateStatus(stat);

        stat = new()
            {
                StatusName = "Dismissed",
                StatusDescription = "The project was not something that were are going to undertake."
            };
        await statusData.CreateStatus(stat);

        statusCreated = true;
    }
}
